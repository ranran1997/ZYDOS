<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <!--web容器是web项目的大脑，所以web容器，首先需要引入spring，让spring管理各个框架，并将其注入为bean。
    然后配置控制层的filter信息。并且配置了springmvc拦截的url为以.hmls结尾的请求-->

    <!--XML 元素不仅是大小写敏感的，而且它们还对出现在其他元素中的次序敏感-->

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!-- 应用上下文配置文件 -->
        <param-value>classpath:spr.xml</param-value>
    </context-param>



    <filter>
        <!--过滤器名，可以随便取，当web应用中有多个过滤器时不允许重名.-->
		<!-- 在使用Spring MVC 做java Web 项目时，乱码问题时常都会出现，可以采用Spring框架自带的过滤器CharacterEncodingFilter， -->
        <filter-name>characterEncodingFilter</filter-name>
        <!--具体的过滤器的类的完整的包名+类名。注意：不能写错了。否则容器不能正确的实例化过滤器-->
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <!--过滤器名，注意要和上面的<filter-name>里的名字一样。-->
        <filter-name>characterEncodingFilter</filter-name>
        <!-- 指定过滤器负责过滤的URL。若指定了*.jsp表示在访问任何一个jsp页面时都会先使用此过滤器进行过滤。
        如果写成login.jsp.则只有在访问login.jsp时才会调用该过滤器进行过滤。-->
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!--监听servletContext，启动contextConfigLocation中的spring配置信息-->
    <!--配置会话侦听器，class表示一个HttpSessionListener或 HttpSessionActivationListener
    或 HttpSessionAttributeListener或 HttpSessionBindingListener的实现类。该节点允许多个 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <listener>
        <listener-class>com.hyy.base.SessionListener</listener-class>
    </listener>

    <servlet>
        <description>spring mvc servlet</description>
        <!-- Servlet名字，可以随便取，有多个Servlet时不允许重名-->
        <servlet-name>dispatcherServlet</servlet-name>
        <!--指定实现这个Servlet的类。完整的包名+类名-->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--定义Servlet的初始化参数(包括参数名和参数值)一个<servlet>元素里可以有多个<init-param>元素。
        在Servlet类中通过ServletConfig类的来访问这些参数。-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!-- 此处配置的是SpringMVC的配置文件 -->
            <param-value>classpath:spr.xml</param-value>
        </init-param>
        <!--指定当前Web应用启动时装载Servlet的次序。当这个数>=0时，容器会按数值从小到大依次加载。
        如果数值<0或没有指定，容器将载Web客户首次访问这个Servlet时加载。-->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- ajax 请求-->
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>*.jss</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>*.cc</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>ImageServlet</servlet-name>
        <servlet-class>com.hyy.sys.login.ImageServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>ImageServlet</servlet-name>
        <url-pattern>/validateCode</url-pattern>
    </servlet-mapping>

    <!-- 配置session超时时间，单位分钟 -->
    <!--设定HttpSession的生命周期。这里以分钟计算。下面的设定指明Session在最长不活动时间为10分钟。
    过了这个时间，Servlet容器将它 作为无效处理。注意这里和程序里指定的计数单位不同，
    程序里是以秒为单位。<session-config>只有<session- timeout>这个元素-->
    <session-config>
        <session-timeout>10</session-timeout>
    </session-config>




    <!-- 在 用户访问Web应用时,如果仅给出Web应用的根访问URL，没有指定具体的文件名，
    容器会调用<weblcome-file- list> 元素里指定的文件清单。<welcome-file-list>里允许有
    多个<welcome-file>元 素，每个元素代表一个文件。容器会先找第一文文件件是否存在，
    如果存在这把这个文件返回个客户，不再进行其他文件的查找。如果不存在则找第二个文件，
    依次 类推。如果所有文件都不存在，则跑出404错误-->
    <welcome-file-list>
        <welcome-file>login.jsp</welcome-file>
    </welcome-file-list>
    <!-- 设置Web应用引用的自定义标签库。
    taglib taglib元素对标记库描述符文件（Tag Libraryu Descriptor file）指定别名。
    此功能使你能够更改TLD文件的位置，而不用编辑使用这些文件的JSP页面-->
    <jsp-config>
        <taglib>
            <taglib-uri>myTaglib</taglib-uri>
            <taglib-location>/WEB-INF/tlds/c.tld</taglib-location>
        </taglib>
        <taglib>
            <taglib-uri>taglib</taglib-uri>
            <taglib-location>/WEB-INF/tlds/fmt.tld</taglib-location>
        </taglib>
    </jsp-config>

</web-app>
