<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.2.xsd
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
     http://www.springframework.org/schema/jdbc
     http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     http://www.springframework.org/schema/mvc
     http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">



    <!--加载配置文件-->
    <context:property-placeholder location="classpath:config.properties"/>

   <!--Hibernate配置begin-->
   <!-- 主要包括：配置数据源c3p0，配置SessionFactory，配置事务管理器，配置事务管理-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
         <!--连接池初始化连接数-->
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
        <property name="minPoolSize" value="${jdbc.minPoolSize}" />
        <property name="maxPoolSize" value="${jdbc.maxPoolSiza}" />
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3-->
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
         <!--请求超时时间-->
        <property name="checkoutTimeout" value="${jdbc.checkoutTimeout}" />
         <!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查-->
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
         <!--连接数据库连接池最大空闲时间-->
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
        <property name="maxStatements" value="${jdbc.maxStatements}" />
    </bean>

    <!--之前用这个org.springframework.orm.hibernate3.LocalSessionFactoryBean-->
     <!--配置hibernate sessionFactory-->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/zydos</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
                <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
            </props>
        </property>
         <!--扫描hibernate注解配置的entity-->
        <property name="packagesToScan">
            <list>
                <value>com.hyy</value>
            </list>
        </property>
    </bean>

     <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <!--Hibernate配置end-->

    <!--Spring配置begin-->
    <!--这个配置隐式注册了多个对注释进行解析处理的处理器，代码中就可以直接使用@Autowired,@Required等annotaion了。
     AutowiredAnnotationBeanPostProcessor 对应@Autowire，CommonAnnotationBeanPostProcessor 对应@Resource等，
     PersistenceAnnotationBeanPostProcessor，RequiredAnnotationBeanPostProcessor 对应@required -->

    <context:annotation-config/>

    <!--注解扫描的包-->
    <!--该配置项其实也包含了自动注入上述processor的功能，因此当使用<context:component-scan/>后，
    即可将<context:annotation-config/>省去。-->
    <context:component-scan base-package="com.hyy"/>
    <!--Spring配置end-->

    <!--springMVC配置start-->
    <!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射-->
    <!--<mvc:annotation-driven/>-->

    <!--基于注释的事务，当注释中发现@Transactional 时，使用id为“TransactionManager”的事务管理器-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- jsp页面解析器，当Controller返回XXX字符串时，先通过拦截器，然后该类就会在/WEB-INF/views/目录下，查找XXX.jsp文件-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/classes/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <context:annotation-config />
    <!--页面要求json类型，后台传回普通java类型时报错，maven添加两个依赖。spr.xml相应配置-->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!--注入springMVC拦截器-->
    <mvc:interceptors>
        <bean class="com.hyy.interceptor.UserInterceptorAdapter" />
    </mvc:interceptors>
    <!--springMVC配置end-->

</beans>